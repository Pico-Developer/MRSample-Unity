// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 PICO Developer
// SPDX-License-Identifier: MIT
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections;
using System.Collections.Generic;

///<<< BEGIN WRITING YOUR CODE FILE_INIT
using System.Threading;
using behaviac;
using Cysharp.Threading.Tasks;
using Microsoft.MixedReality.Toolkit;
using PicoMRDemo.Runtime.Runtime.Item;
using PicoMRDemo.Runtime.Runtime.Pet;
using PicoMRDemo.Runtime.Service;
using UnityEngine;
using Debug = UnityEngine.Debug;
using Random = UnityEngine.Random;

///<<< END WRITING YOUR CODE

namespace PicoMRDemo.Runtime.Pet
{
///<<< BEGIN WRITING YOUR CODE NAMESPACE_INIT

///<<< END WRITING YOUR CODE

	public class PetAgent : behaviac.Agent
///<<< BEGIN WRITING YOUR CODE PetAgent
///<<< END WRITING YOUR CODE
	{
		public bool CheckCatchBall()
		{
///<<< BEGIN WRITING YOUR CODE CheckCatchBall
			return PetBehaviors.HasTempTarget;
///<<< END WRITING YOUR CODE
		}

		public float GetRandomValue()
		{
///<<< BEGIN WRITING YOUR CODE GetRandomValue
			var value = Random.Range(0.0f, 1.0f);
			return value;
///<<< END WRITING YOUR CODE
		}

		public bool HasInVirtualWorld()
		{
///<<< BEGIN WRITING YOUR CODE HasInVirtualWorld
			return PetBehaviors.HasInVirtualWorld;
///<<< END WRITING YOUR CODE
		}

		public bool IsCatchingBall()
		{
///<<< BEGIN WRITING YOUR CODE IsCatchingBall
			return _isCatchBall;
///<<< END WRITING YOUR CODE
		}

		public bool IsRua()
		{
///<<< BEGIN WRITING YOUR CODE IsRua
			return _isRua;
///<<< END WRITING YOUR CODE
		}

		public bool IsTouch()
		{
///<<< BEGIN WRITING YOUR CODE IsTouch
			return _isTouch;
///<<< END WRITING YOUR CODE
		}

		public bool IsVirtualWorld()
		{
///<<< BEGIN WRITING YOUR CODE IsVirtualWorld
			return PetBehaviors.IsVirtualWorld;
///<<< END WRITING YOUR CODE
		}

		public bool IsWalkFinish()
		{
///<<< BEGIN WRITING YOUR CODE IsWalkFinish
			return PetBehaviors.IsIdleFinished() && PetBehaviors.IsWalkFinished();
///<<< END WRITING YOUR CODE
		}

		public void Patrol()
		{
///<<< BEGIN WRITING YOUR CODE Patrol
			PetBehaviors.PlayAnimation(PetAnimationType.Move);
			PetBehaviors.TrackPatrolTarget().Forget();
			///<<< END WRITING YOUR CODE
		}

		public void PlayCatchBall()
		{
///<<< BEGIN WRITING YOUR CODE PlayCatchBall
			_isCatchBall = true;
			PetBehaviors.PlayAnimation(PetAnimationType.Move);
			PetBehaviors.TrackTempTarget().Forget();
			///<<< END WRITING YOUR CODE
		}

		public void PlayIdle()
		{
///<<< BEGIN WRITING YOUR CODE PlayIdle
			PetBehaviors.PlayAnimation(PetAnimationType.Idle);
			PetBehaviors.StartIdle().Forget();
			///<<< END WRITING YOUR CODE
		}

		public void PlayRua()
		{
///<<< BEGIN WRITING YOUR CODE PlayRua
			PetBehaviors.PlayAnimation(PetAnimationType.Shame);
			_isRua = true;
			///<<< END WRITING YOUR CODE
		}

		public void PlayWalk()
		{
///<<< BEGIN WRITING YOUR CODE PlayWalk
			PetBehaviors.PlayAnimation(PetAnimationType.Move);
			PetBehaviors.TrackMainTarget().Forget();
			///<<< END WRITING YOUR CODE
		}

		public void WalkToRealWorld()
		{
///<<< BEGIN WRITING YOUR CODE WalkToRealWorld
			PetBehaviors.PlayAnimation(PetAnimationType.Move);
			PetBehaviors.TrackRealWorld().Forget();
///<<< END WRITING YOUR CODE
		}

		public void WalkToVirtualWorld()
		{
///<<< BEGIN WRITING YOUR CODE WalkToVirtualWorld
			PetBehaviors.PlayAnimation(PetAnimationType.Move);
			PetBehaviors.TrackVirtualWorld().Forget();
			///<<< END WRITING YOUR CODE
		}

///<<< BEGIN WRITING YOUR CODE CLASS_PART
		public MRTKBaseInteractable Interactable;
		public PetBehaviors PetBehaviors;

		private bool _isTouch = false;

		private bool _isRua = false;

		private bool _isCatchBall = false;
		//行为树的名称
        private string _btName = "PetBehaviour";
		private behaviac.EBTStatus _curStatus = behaviac.EBTStatus.BT_SUCCESS;

        private readonly string TAG = nameof(PetAgent);
        
        private void Awake()
        {
            initBehaviac();
            initAgent();
        }

        private void Start()
        {
	        LoopBehaviour().Forget();
        }

        private void OnEnable()
        {
	        Interactable.hoverEntered.AddListener((args) =>
            {
	            if (Interactable.IsGrabHovered.Active)
	            {
					_isTouch = true;
					_isRua = false;
	            }
            });
            Interactable.hoverExited.AddListener((args) =>
            {
	            if (!Interactable.IsGrabHovered.Active)
	            {
					_isTouch = false;
					_isRua = false;
	            }
            });
            PetBehaviors.ReachedTempTarget += async (temp) =>
            {
	            // PetAnimation.Play("pickBall");
	            await PetBehaviors.PlayAnimationAwait(PetAnimationType.PickBall, CancellationToken.None);
	            PetBehaviors.CatchableManager.Catch(gameObject, temp.GetComponent<ICatchable>());
	            PetBehaviors.PlayAnimation(PetAnimationType.MoveWithBall);
	            await PetBehaviors.TrackMainTarget();
	            PetBehaviors.CatchableManager.Uncatch(temp.GetComponent<ICatchable>());
	            _isCatchBall = false;
            };
            PetBehaviors.ReachedTempTargetEnd += (temp) =>
            {
	            PetBehaviors.TempTarget = null;
            };
            PetBehaviors.ReachedVritualWorld += () =>
            {
	            PetBehaviors.HasInVirtualWorld = true;
            };
            PetBehaviors.ReachedRealWorld += () =>
            {
	            PetBehaviors.HasInVirtualWorld = false;
            };
        }

        private void OnDisable()
        {
	        Interactable.hoverEntered.RemoveAllListeners();
	        Interactable.hoverExited.RemoveAllListeners();
        }

        private void initBehaviac()
        {
            behaviac.Workspace.Instance.FileFormat = behaviac.Workspace.EFileFormat.EFF_xml;
        }
        
        private bool initAgent()
        {
            bool bRet = this.btload(_btName);
            if (!bRet)
                Debug.unityLogger.LogError(TAG, "Behavior tree data load failed! " + _btName );
            else
                this.btsetcurrent(_btName);
            return bRet;
        }

        public void SetCatchableManager(ICatchableManager catchableManager)
        {
	        PetBehaviors.CatchableManager = catchableManager;
        }

        public void SetVirtualWorldManager(IVirtualWorldManager virtualWorldManager)
        {
	        PetBehaviors.VirtualWorldManager = virtualWorldManager;
        }
        
        async UniTask LoopBehaviour()
        {
	        while (true)
	        {
		        if (_curStatus == EBTStatus.BT_SUCCESS)
		        {
					// behaviac.Workspace.Instance.DebugUpdate();
					_curStatus = this.btexec();
					await UniTask.Delay(1000);
		        }
	        }
        }
        
        private void OnDestroy()
        {
            behaviac.Workspace.Instance.UnLoadAll();
            behaviac.Workspace.Instance.Cleanup();
        }
///<<< END WRITING YOUR CODE

	}

///<<< BEGIN WRITING YOUR CODE NAMESPACE_UNINIT

///<<< END WRITING YOUR CODE
}

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT

///<<< END WRITING YOUR CODE

